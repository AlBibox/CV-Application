{"version":3,"sources":["components/GeneralInfo.js","components/SingleEducation.js","components/Education.js","components/SingleJob.js","components/JobExperience.js","components/SingleSkill.js","components/Skills.js","App.js","reportWebVitals.js","index.js"],"names":["GeneralInfo","props","state","editMode","firstName","surname","jobTitle","phone","email","position","firstNameOld","surnameOld","jobTitleOld","phoneOld","emailOld","positionOld","handleChange","bind","toggleEditMode","handleUndo","handleSubmit","this","setState","e","value","target","name","validator","className","placeholder","type","onChange","onClick","disabled","href","Component","SingleEducation","studyTitle","schoolName","initialDate","endingDate","endingDateNotYetFinished","description","studyTitleOld","schoolNameOld","initialDateOld","endingDateOld","endingDateNotYetFinishedOld","descriptionOld","handleSubmitforNewElement","handleCheckbox","isNew","addingMode","checked","rows","removeEl","Education","educationList","addNewElement","toggleAddingMode","removeElement","concat","uniqid","filter","item","_reactInternals","key","map","SingleJob","companyName","mainTasks","companyNameOld","mainTasksOld","shoolNameOld","JobExperience","jobsList","console","log","SingleSkill","skillName","Skills","skillsList","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f04c0085.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nclass GeneralInfo extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n    \r\n        this.state = {\r\n            editMode: false,\r\n            firstName: \"Name\",\r\n            surname: \"Surname\",\r\n            jobTitle: \"My specialization\",\r\n            phone: \"+00 000 0000000\",\r\n            email: \"yourMail@mailProvider.com\",\r\n            position: \"27 Colmore Row, Birmingham, England\",\r\n\r\n            firstNameOld: \"\",\r\n            surnameOld: \"\",\r\n            jobTitleOld: \"\",\r\n            phoneOld: \"\",\r\n            emailOld: \"\",\r\n            positionOld: \"\",     \r\n        }\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.toggleEditMode = this.toggleEditMode.bind(this);\r\n        this.handleUndo = this.handleUndo.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        \r\n        \r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({\r\n            firstNameOld: this.state.firstName,\r\n            surnameOld: this.state.surname,\r\n            jobTitleOld: this.state.jobTitle,\r\n            phoneOld: this.state.phone,\r\n            emailOld: this.state.email,\r\n            positionOld: this.state.position\r\n        })\r\n    }\r\n\r\n    \r\n    toggleEditMode(){\r\n        this.setState({\r\n            editMode: !this.state.editMode,\r\n        })\r\n    }\r\n\r\n    handleSubmit() {\r\n        this.setState({\r\n            firstNameOld: this.state.firstName,\r\n            surnameOld: this.state.surname,\r\n            jobTitleOld: this.state.jobTitle,\r\n            phoneOld: this.state.phone,\r\n            emailOld: this.state.email,\r\n            positionOld: this.state.position\r\n        })\r\n        this.toggleEditMode();\r\n    }\r\n\r\n    handleChange(e){\r\n        const value = e.target.value;\r\n        const name = e.target.name;\r\n\r\n        this.setState({\r\n            [name] : value,\r\n        })\r\n    }\r\n\r\n    \r\n    handleUndo(){\r\n        this.setState({\r\n            firstName: this.state.firstNameOld,\r\n            surname: this.state.surnameOld,\r\n            jobTitle: this.state.jobTitleOld,\r\n            phone: this.state.phoneOld,\r\n            email: this.state.emailOld,\r\n            position: this.state.positionOld,\r\n        });\r\n        this.toggleEditMode();\r\n    }\r\n\r\n    \r\n\r\n    render() {\r\n        const { firstName, surname, jobTitle, phone, email, position, editMode } = this.state;\r\n        let validator = (!firstName || !surname || !jobTitle ) ? true : false;\r\n\r\n        if (!editMode) {\r\n            return (\r\n                <div className=\"generalInfo\">\r\n                    \r\n                    <div className=\"outputWrapper\">\r\n                        <h3>{firstName} {surname}</h3>\r\n                        <h4>{jobTitle}</h4>\r\n                    </div>\r\n                    \r\n                    <div className=\"outputWrapper\">\r\n                        <h5>{phone}</h5>\r\n                        <h5><a href={`mailto:${email}`}>{email}</a></h5>\r\n                        <h5>{position}</h5>\r\n                    </div>\r\n                    <div className=\"buttonContainer\">\r\n                        <button onClick={this.toggleEditMode}>EDIT INFORMATION</button>\r\n                    </div>                  \r\n                </div>\r\n            )\r\n        } else {\r\n            return (\r\n                <div className=\"generalInfoEditable\">\r\n                    <div className=\"doubleFieldContainer\">\r\n                        <div className=\"fieldWrapper\">\r\n                            <label>Name</label>\r\n                            <input\r\n                                placeholder=\"* Enter your name\"\r\n                                type=\"text\"\r\n                                name=\"firstName\"\r\n                                value={firstName}\r\n                                onChange={this.handleChange}\r\n                            />\r\n                        </div>\r\n                        <div className=\"fieldWrapper\">\r\n                            <label>Surname</label>\r\n                            <input\r\n                                placeholder=\"* Enter your surname\"\r\n                                type=\"text\"\r\n                                name=\"surname\"\r\n                                value={surname}\r\n                                onChange={this.handleChange}\r\n                            />\r\n                        </div>  \r\n                    </div>\r\n                    <div className=\"singleFieldContainer\">\r\n                        <div className=\"fieldWrapper\">\r\n                            <label>Job Title</label>\r\n                            <input\r\n                                placeholder=\"* Enter your job title\"\r\n                                type=\"text\"\r\n                                name=\"jobTitle\"\r\n                                value={jobTitle}\r\n                                onChange={this.handleChange}\r\n                            />\r\n                        </div>                      \r\n                    </div>\r\n                    <div className=\"doubleFieldContainer\">\r\n                        <div className=\"fieldWrapper\">\r\n                            <label>Phone number</label>\r\n                            <input\r\n                                placeholder=\"* Enter your phone number\"\r\n                                type=\"text\"\r\n                                name=\"phone\"\r\n                                value={phone}\r\n                                onChange={this.handleChange}\r\n                            />\r\n                        </div>\r\n                        <div className=\"fieldWrapper\">\r\n                            <label>Email</label>\r\n                            <input\r\n                                placeholder=\"* Enter your email\"\r\n                                type=\"text\"\r\n                                name=\"email\"\r\n                                value={email}\r\n                                onChange={this.handleChange}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"singleFieldContainer\">\r\n                        \r\n                        <div className=\"fieldWrapper\">\r\n                            <label>Position</label>\r\n                            <input\r\n                                placeholder=\"* Enter your position\"\r\n                                type=\"text\"\r\n                                name=\"position\"\r\n                                value={position}\r\n                                onChange={this.handleChange}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    \r\n                                      \r\n                    <div className=\"buttonContainer\">\r\n                        <button onClick={this.handleSubmit} disabled={validator}>SUBMIT</button>\r\n                        <button onClick={this.handleUndo}>UNDO</button>\r\n                    </div>\r\n                </div>\r\n            )\r\n        }\r\n        \r\n    }\r\n}\r\n\r\nexport default GeneralInfo","import React, { Component } from 'react'\r\n\r\nclass SingleEducation extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n    \r\n        this.state = {\r\n            editMode: false,\r\n            studyTitle: \"\",\r\n            schoolName: \"\",\r\n            initialDate: \"\",\r\n            endingDate: \"\",\r\n            endingDateNotYetFinished: false,\r\n            description: \"\",\r\n\r\n            studyTitleOld: \"\",\r\n            schoolNameOld: \"\",\r\n            initialDateOld: \"\",\r\n            endingDateOld: \"\",\r\n            endingDateNotYetFinishedOld: \"\",\r\n            descriptionOld: \"\",\r\n            \r\n        }\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.toggleEditMode = this.toggleEditMode.bind(this);\r\n        this.handleUndo = this.handleUndo.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.handleSubmitforNewElement = this.handleSubmitforNewElement.bind(this);\r\n        this.handleCheckbox = this.handleCheckbox.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({\r\n            isNew: true,\r\n            editMode: true,\r\n            studyTitleOld: this.state.studyTitle,\r\n            schoolNameOld: this.state.schoolName,\r\n            initialDateOld: this.state.initialDate,\r\n            endingDateOld: this.state.endingDate,\r\n            endingDateNotYetFinishedOld: this.state.endingDateNotYetFinished,\r\n            descriptionOld: this.state.description,\r\n        })\r\n    }\r\n\r\n    toggleEditMode() {\r\n        this.setState({\r\n            editMode: !this.state.editMode,\r\n        })  \r\n    }\r\n\r\n\r\n    //METHOD FOR SUBMITTING OLD ELEMENTS\r\n    handleSubmit(){\r\n        const { studyTitle, schoolName, initialDate, endingDate, endingDateNotYetFinished, description } = this.state;\r\n        \r\n        this.setState({\r\n            studyTitleOld: studyTitle,\r\n            schoolNameOld: schoolName,\r\n            initialDateOld: initialDate,\r\n            endingDateOld: endingDate,\r\n            endingDateNotYetFinishedOld: endingDateNotYetFinished,\r\n            descriptionOld: description,\r\n        })\r\n        this.toggleEditMode();        \r\n    }\r\n\r\n\r\n    //METHOD FOR SUBMITTING NEW ELEMENT\r\n    handleSubmitforNewElement(){\r\n        const {studyTitle, schoolName, initialDate, endingDate, endingDateNotYetFinished, description} = this.state;\r\n        \r\n        this.setState({\r\n            isNew: false,\r\n            studyTitleOld: studyTitle,\r\n            schoolNameOld: schoolName,\r\n            initialDateOld: initialDate,\r\n            endingDateOld: endingDate,\r\n            endingDateNotYetFinishedOld: endingDateNotYetFinished,\r\n            descriptionOld: description,\r\n        })\r\n        this.toggleEditMode();\r\n        this.props.addingMode();\r\n    }\r\n\r\n\r\n    handleChange(e) {\r\n        const value = e.target.value;\r\n        const name = e.target.name;\r\n\r\n        this.setState({\r\n            [name]: value,\r\n        })\r\n    }\r\n\r\n    handleCheckbox(e) {\r\n        this.setState({\r\n            endingDateNotYetFinished: e.target.checked,\r\n        })\r\n    }\r\n\r\n\r\n    handleUndo() {\r\n        this.setState({\r\n            studyTitle: this.state.studyTitleOld,\r\n            schoolName: this.state.schoolNameOld,\r\n            initialDate: this.state.initialDateOld,\r\n            endingDate: this.state.endingDateOld,\r\n            endingDateNotYetFinished: this.state.endingDateNotYetFinishedOld,\r\n            description: this.state.descriptionOld,\r\n        });\r\n        this.toggleEditMode(); \r\n    }\r\n\r\n   \r\n    \r\n    render() {\r\n        const { studyTitle, schoolName, initialDate, endingDate, endingDateNotYetFinished, description, editMode, isNew } = this.state;\r\n        let validator = (!studyTitle || !schoolName || !initialDate || (!endingDate && !endingDateNotYetFinished)) ? true : false;\r\n\r\n        if(!editMode){\r\n            return (\r\n                <div className=\"singleEducation\">\r\n                    <div className=\"dataContainer\">\r\n                        <h4 className=\"date\">{initialDate} / {!endingDateNotYetFinished ? endingDate : \"In progress\"}</h4>\r\n                            <h4><b>{studyTitle}</b></h4>  \r\n                            <h4><b>{schoolName}</b></h4>\r\n                            <h4 className=\"otherData\">{description}</h4>                                           \r\n                    </div>\r\n                           \r\n                    <div className=\"singleButtonsContainer\">\r\n                        <button onClick={this.toggleEditMode}>EDIT</button>\r\n                        <button onClick={() => this.props.removeEl(this)}>DELETE</button>\r\n                    </div> \r\n                </div>\r\n            )\r\n        } else {\r\n            return (\r\n                <div className=\"singleEducationEditable\">\r\n\r\n                    <div className=\"doubleFieldContainer\">\r\n                        <div className=\"fieldWrapper\">\r\n                            <label>Title of study</label>\r\n                            <input\r\n                                placeholder=\"* Enter the title of study\"\r\n                                type=\"text\"\r\n                                name=\"studyTitle\"\r\n                                value={studyTitle}\r\n                                onChange={this.handleChange}\r\n                            />\r\n                        </div>\r\n                        <div className=\"fieldWrapper\">\r\n                            <label>School name</label>\r\n                            <input\r\n                                placeholder=\"* Enter the school name\"\r\n                                type=\"text\"\r\n                                name=\"schoolName\"\r\n                                value={schoolName}\r\n                                onChange={this.handleChange}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"singleFieldContainer\">\r\n                        <div className=\"fieldWrapper\">\r\n                            <label>Starting date</label>\r\n                            <input\r\n                                placeholder=\"* Enter when you started this study\"\r\n                                type=\"date\"\r\n                                name=\"initialDate\"\r\n                                value={initialDate}\r\n                                onChange={this.handleChange}\r\n                            />\r\n                        </div>    \r\n                    </div>\r\n\r\n                    <div className=\"doubleFieldContainer\">                     \r\n                        <div className=\"fieldWrapper\">\r\n                            <label>Ending date</label>\r\n                            <input\r\n                                placeholder=\"* Enter when you finished this study\"\r\n                                type=\"date\"\r\n                                name=\"endingDate\"\r\n                                disabled={endingDateNotYetFinished}\r\n                                value={endingDate}\r\n                                onChange={this.handleChange}\r\n                            />\r\n                        </div>\r\n                        <div className=\"fieldWrapperCheckbox\">\r\n                            <label>In progress</label>\r\n                            <input\r\n                                type=\"checkbox\"\r\n                                checked={endingDateNotYetFinished}\r\n                                onChange={this.handleCheckbox}\r\n                            />                           \r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"singleFieldContainer\">\r\n                        <div className=\"fieldWrapper\">\r\n                            <label>Description</label>\r\n                            <textarea\r\n                                placeholder=\"* Describe your experience\"\r\n                                name=\"description\"\r\n                                rows=\"4\"\r\n                                value={description}\r\n                                onChange={this.handleChange}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                       \r\n                    {isNew //CONDITION FOR THE RENDER OF THE BUTTONS (different for new added and old element)\r\n                        ?  \r\n                            <div className=\"buttonContainer\">\r\n                                <button onClick={this.handleSubmitforNewElement} disabled={validator}>SUBMIT</button>                                   \r\n                                <button onClick={() => this.props.removeEl(this)}>UNDO</button>\r\n                            </div> \r\n                        :\r\n                            <div className=\"buttonContainer\">\r\n                                <button onClick={this.handleSubmit} disabled={validator}>SUBMIT</button>\r\n                                <button onClick={this.handleUndo}>UNDO</button>\r\n                            </div>  \r\n                    }                              \r\n                </div>\r\n            )\r\n        }  \r\n    }\r\n}\r\n\r\nexport default SingleEducation\r\n\r\n","import React, { Component } from 'react';\r\nimport SingleEducation from './SingleEducation';\r\nimport uniqid from \"uniqid\";\r\n\r\nclass Education extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n    \r\n        this.state = {\r\n             educationList: [],\r\n             addingMode: false\r\n        }\r\n\r\n        this.addNewElement = this.addNewElement.bind(this);\r\n        this.toggleAddingMode = this.toggleAddingMode.bind(this);\r\n        this.removeElement = this.removeElement.bind(this);\r\n        \r\n    }\r\n\r\n    toggleAddingMode() {\r\n        this.setState({\r\n            addingMode: !this.state.addingMode,\r\n        })\r\n    }\r\n    \r\n\r\n    addNewElement() {\r\n        this.toggleAddingMode();\r\n        this.setState({   \r\n            educationList: this.state.educationList.concat(<SingleEducation key={uniqid()} />)\r\n        })\r\n    }\r\n\r\n    removeElement(e) {\r\n        this.setState({\r\n            educationList: this.state.educationList\r\n                .filter(item => e._reactInternals.key !== item.key)\r\n        })\r\n\r\n        if(this.state.addingMode){\r\n            this.setState({addingMode: false})\r\n        }\r\n    }\r\n\r\n\r\n    \r\n\r\n    \r\n    \r\n    render() {\r\n        return (\r\n            <div className = \"educationBox\" >\r\n                <h2>EDUCATION LIST</h2>\r\n                {this.state.educationList\r\n                    .map(item => \r\n                        <SingleEducation\r\n                            key={item.key}\r\n                            addingMode={this.toggleAddingMode}\r\n                            removeEl={this.removeElement}\r\n                        />                    \r\n                )}\r\n                {!this.state.addingMode && \r\n                    <div className=\"generalButtonContainer\">\r\n                        <button onClick={this.addNewElement}>ADD NEW EDUCATION</button>\r\n                    </div>\r\n                }\r\n                 \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Education","import React, { Component } from 'react'\r\n\r\nclass SingleJob extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            editMode: false,\r\n            companyName: \"\",\r\n            position: \"\",\r\n            initialDate: \"\",\r\n            endingDate: \"\",\r\n            endingDateNotYetFinished: false,\r\n            mainTasks: \"\",\r\n            description: \"\",\r\n\r\n            companyNameOld: \"\",\r\n            positionOld: \"\",\r\n            initialDateOld: \"\",\r\n            endingDateOld: \"\",\r\n            endingDateNotYetFinishedOld: \"\",\r\n            mainTasksOld: \"\",\r\n            descriptionOld: \"\",\r\n        }\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.toggleEditMode = this.toggleEditMode.bind(this);\r\n        this.handleUndo = this.handleUndo.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.handleSubmitforNewElement = this.handleSubmitforNewElement.bind(this);\r\n        this.handleCheckbox = this.handleCheckbox.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({\r\n            isNew: true,\r\n            editMode: true,\r\n            companyNameOld: this.state.companyName,\r\n            positionOld: this.state.position,\r\n            initialDateOld: this.state.initialDate,\r\n            endingDateOld: this.state.endingDate,\r\n            endingDateNotYetFinishedOld: this.state.endingDateNotYetFinished,\r\n            mainTasksOld: this.state.mainTasks,\r\n            descriptionOld: this.state.description,\r\n        })\r\n    }\r\n\r\n    toggleEditMode() {\r\n        this.setState({\r\n            editMode: !this.state.editMode,\r\n        })\r\n    }\r\n\r\n\r\n    //METHOD FOR SUBMITTING OLD ELEMENTS\r\n    handleSubmit() {\r\n        const { companyName, position, initialDate, endingDate, endingDateNotYetFinished, mainTasks, description } = this.state;\r\n\r\n        this.setState({\r\n            companyNameOld: companyName,\r\n            positionOld: position,\r\n            initialDateOld: initialDate,\r\n            endingDateOld: endingDate,\r\n            endingDateNotYetFinishedOld: endingDateNotYetFinished,\r\n            mainTasksOld: mainTasks,\r\n            descriptionOld: description,\r\n        })\r\n        this.toggleEditMode();\r\n    }\r\n\r\n\r\n    //METHOD FOR SUBMITTING NEW ELEMENT\r\n    handleSubmitforNewElement() {\r\n        const { companyName, position, initialDate, endingDate, endingDateNotYetFinished, mainTasks, description } = this.state;\r\n\r\n        this.setState({\r\n            isNew: false,\r\n            companyNameOld: companyName,\r\n            positionOld: position,\r\n            initialDateOld: initialDate,\r\n            endingDateOld: endingDate,\r\n            endingDateNotYetFinishedOld: endingDateNotYetFinished,\r\n            mainTasksOld: mainTasks,\r\n            descriptionOld: description,\r\n        })\r\n        this.toggleEditMode();\r\n        this.props.addingMode();\r\n    }\r\n\r\n\r\n    handleChange(e) {\r\n        const value = e.target.value;\r\n        const name = e.target.name;\r\n\r\n        this.setState({\r\n            [name]: value,\r\n        })\r\n    }\r\n\r\n    handleCheckbox(e) {\r\n        this.setState({\r\n            endingDateNotYetFinished: e.target.checked,\r\n        })\r\n    }\r\n\r\n\r\n    handleUndo() {\r\n        this.setState({\r\n            companyName: this.state.companyNameOld,\r\n            position: this.state.shoolNameOld,\r\n            initialDate: this.state.initialDateOld,\r\n            endingDate: this.state.endingDateOld,\r\n            endingDateNotYetFinished: this.state.endingDateNotYetFinishedOld,\r\n            mainTasks: this.state.mainTasksOld,\r\n            description: this.state.descriptionOld,\r\n        });\r\n        this.toggleEditMode();\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        const { companyName, position, initialDate, endingDate, endingDateNotYetFinished, mainTasks, description, editMode, isNew } = this.state;\r\n        let validator = (!companyName || !position || !initialDate || (!endingDate && !endingDateNotYetFinished)) ? true : false;\r\n\r\n        if (!editMode) {\r\n            return (\r\n                <div className=\"singleJob\">\r\n                    <div className=\"dataContainer\">\r\n                        <h4 className=\"date\">{initialDate} / {!endingDateNotYetFinished ? endingDate : \"In progress\"}</h4>\r\n                        <h4><b>{position}</b></h4>\r\n                        <h4><b>{companyName}</b></h4>\r\n                        {mainTasks && <h4 className=\"otherData\">TASKS: <b>{mainTasks}</b></h4>}\r\n                        <h4 className=\"otherData\">{description}</h4>\r\n                    </div>\r\n                                      \r\n                    <div className=\"singleButtonsContainer\">\r\n                        <button onClick={this.toggleEditMode}>EDIT</button>\r\n                        <button onClick={() => this.props.removeEl(this)}>DELETE</button>\r\n                    </div>\r\n                </div>\r\n            )\r\n        } else {\r\n            return (\r\n                <div className=\"singleJobEditable\">\r\n                    <div className=\"doubleFieldContainer\">\r\n                        <div className=\"fieldWrapper\">\r\n                            <label>Company name</label>\r\n                            <input\r\n                                placeholder=\"* Enter the company name\"\r\n                                type=\"text\"\r\n                                name=\"companyName\"\r\n                                value={companyName}\r\n                                onChange={this.handleChange}\r\n                            />\r\n                        </div>\r\n                        <div className=\"fieldWrapper\">\r\n                            <label>Job position</label>\r\n                            <input\r\n                                placeholder=\"* Enter your job position\"\r\n                                type=\"text\"\r\n                                name=\"position\"\r\n                                value={position}\r\n                                onChange={this.handleChange}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"singleFieldContainer\">\r\n                        <div className=\"fieldWrapper\">\r\n                            <label>Starting date</label>\r\n                            <input\r\n                                placeholder=\"* Enter when you started this job\"\r\n                                type=\"date\"\r\n                                name=\"initialDate\"\r\n                                value={initialDate}\r\n                                onChange={this.handleChange}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    \r\n                    <div className=\"doubleFieldContainer\">\r\n                        <div className=\"fieldWrapper\">\r\n                            <label>Ending date</label>\r\n                            <input\r\n                                placeholder=\"* Enter when you finished this job\"\r\n                                type=\"date\"\r\n                                name=\"endingDate\"\r\n                                disabled={endingDateNotYetFinished}\r\n                                value={endingDate}\r\n                                onChange={this.handleChange}\r\n                            />\r\n                        </div>\r\n                        <div className=\"fieldWrapperCheckbox\">\r\n                            <label>In progress</label>\r\n                            <input\r\n                                type=\"checkbox\"\r\n                                checked={endingDateNotYetFinished}\r\n                                onChange={this.handleCheckbox}\r\n                            />\r\n                        </div>                       \r\n                    </div>\r\n\r\n                    <div className=\"singleFieldContainer\">\r\n                        <div className=\"fieldWrapper\">\r\n                            <label>Main tasks</label>\r\n                            <textarea\r\n                                placeholder=\"* Enter your main tasks\"\r\n                                name=\"mainTasks\"\r\n                                rows=\"3\"\r\n                                value={mainTasks}\r\n                                onChange={this.handleChange}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    \r\n                    <div className=\"singleFieldContainer\">\r\n                        <div className=\"fieldWrapper\">\r\n                            <label>Description</label>\r\n                            <textarea\r\n                                placeholder=\"* Describe your experience\"\r\n                                name=\"description\"\r\n                                rows=\"4\"\r\n                                value={description}\r\n                                onChange={this.handleChange}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    \r\n                    {isNew //CONDITION FOR THE RENDER OF THE BUTTONS (different for new added and old element)\r\n                        ?\r\n                        <div className=\"buttonContainer\">\r\n                            <button onClick={this.handleSubmitforNewElement} disabled={validator}>SUBMIT</button>\r\n                            <button onClick={() => this.props.removeEl(this)}>UNDO</button>\r\n                        </div>\r\n                        :\r\n                        <div className=\"buttonContainer\">\r\n                            <button onClick={this.handleSubmit} disabled={validator}>SUBMIT</button>\r\n                            <button onClick={this.handleUndo}>UNDO</button>\r\n                        </div>\r\n                    }\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\nexport default SingleJob\r\n\r\n","import React, { Component } from 'react';\r\nimport SingleJob from './SingleJob';\r\nimport uniqid from \"uniqid\";\r\n\r\n\r\nclass JobExperience extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            jobsList: [],\r\n            addingMode: false\r\n        }\r\n\r\n        this.addNewElement = this.addNewElement.bind(this);\r\n        this.toggleAddingMode = this.toggleAddingMode.bind(this);\r\n        this.removeElement = this.removeElement.bind(this);\r\n\r\n    }\r\n\r\n    toggleAddingMode() {\r\n        this.setState({\r\n            addingMode: !this.state.addingMode,\r\n        })\r\n    }\r\n\r\n    addNewElement() {\r\n        this.toggleAddingMode();\r\n        this.setState({\r\n            jobsList: this.state.jobsList.concat(<SingleJob key={uniqid()} />)\r\n        }, () => console.log(this.state.jobsList))\r\n    }\r\n\r\n    removeElement(e) {\r\n        this.setState({\r\n           jobsList: this.state.jobsList\r\n                .filter(item => e._reactInternals.key !== item.key)\r\n        })\r\n\r\n        if (this.state.addingMode) {\r\n            this.setState({ addingMode: false })\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"jobsBox\" >\r\n                <h2>JOBS LIST</h2>\r\n                {this.state.jobsList\r\n                    .map(item =>\r\n                        <SingleJob\r\n                            key={item.key}\r\n                            addingMode={this.toggleAddingMode}\r\n                            removeEl={this.removeElement}\r\n                        />\r\n                    )}\r\n                {!this.state.addingMode &&\r\n                    <div className=\"generalButtonContainer\">\r\n                        <button onClick={this.addNewElement}>ADD NEW JOB</button>\r\n                    </div> \r\n                }\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default JobExperience","import React, { Component } from 'react'\r\n\r\nclass SingleSkill extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            editMode: false,\r\n            skillName: \"\",        \r\n        }\r\n\r\n        this.handleChange = this.handleChange.bind(this);    \r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({\r\n            isNew: true,\r\n            editMode: true,        \r\n        })\r\n    }\r\n\r\n    toggleEditMode() {\r\n        this.setState({\r\n            editMode: !this.state.editMode,\r\n        })\r\n    }\r\n\r\n\r\n    handleSubmit() {\r\n        this.setState({isNew: false})\r\n        this.toggleEditMode();\r\n        this.props.addingMode();\r\n    }\r\n\r\n\r\n    handleChange(e) {\r\n        const value = e.target.value;\r\n        const name = e.target.name;\r\n\r\n        this.setState({[name]: value,})\r\n    }\r\n\r\n \r\n    render() {\r\n        const { skillName, editMode } = this.state;\r\n        let validator = (!skillName) ? true : false;\r\n\r\n        if (!editMode) {\r\n            return (\r\n                <div className=\"singleSkill\">\r\n                    <h4 className=\"data\">{skillName}</h4>\r\n                    <div className=\"deleteButton\">\r\n                        <button onClick={() => this.props.removeEl(this)}>X</button>\r\n                    </div>\r\n                </div>\r\n            )\r\n        } else {\r\n            return (\r\n                <div className=\"singleSkillEditable\">\r\n                    <div className=\"fieldWrapper\">\r\n                        <input\r\n                            placeholder=\"* Enter the skill name\"\r\n                            type=\"text\"\r\n                            name=\"skillName\"\r\n                            value={skillName}\r\n                            onChange={this.handleChange}\r\n                        />\r\n                    </div>                  \r\n                    <div className=\"singleButtonsContainer\">\r\n                        <button onClick={this.handleSubmit} disabled={validator}>SUBMIT</button>\r\n                        <button onClick={() => this.props.removeEl(this)}>UNDO</button>\r\n                    </div>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\nexport default SingleSkill\r\n","import React, { Component } from 'react';\r\nimport SingleSkill from './SingleSkill';\r\nimport uniqid from \"uniqid\";\r\n\r\n\r\nclass Skills extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            skillsList: [],\r\n            addingMode: false\r\n        }\r\n\r\n        this.addNewElement = this.addNewElement.bind(this);\r\n        this.toggleAddingMode = this.toggleAddingMode.bind(this);\r\n        this.removeElement = this.removeElement.bind(this);\r\n    }\r\n\r\n\r\n    toggleAddingMode() {\r\n        this.setState({\r\n            addingMode: !this.state.addingMode,\r\n        })\r\n    }\r\n\r\n\r\n    addNewElement() {\r\n        this.toggleAddingMode();\r\n        this.setState({\r\n            skillsList: this.state.skillsList.concat(<SingleSkill key={uniqid()} />)\r\n        })\r\n    }\r\n\r\n\r\n    removeElement(e) {\r\n        this.setState({\r\n            skillsList: this.state.skillsList\r\n                .filter(item => e._reactInternals.key !== item.key)\r\n        })\r\n\r\n        if (this.state.addingMode) this.setState({ addingMode: false })   \r\n    }\r\n\r\n    \r\n    render() {\r\n        return (\r\n            <div className=\"skills\" >\r\n                <h2>SKILLS</h2>\r\n                <div className=\"itemsContainer\">\r\n                    {this.state.skillsList\r\n                        .map(item =>\r\n                            <SingleSkill\r\n                                key={item.key}\r\n                                addingMode={this.toggleAddingMode}\r\n                                removeEl={this.removeElement}\r\n                            />\r\n                        )}\r\n                </div>\r\n                \r\n                {!this.state.addingMode &&\r\n                    <div className=\"generalButtonContainer\"> \r\n                        <button onClick={this.addNewElement}>ADD NEW SKILL</button>\r\n                    </div>\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Skills","import GeneralInfo from './components/GeneralInfo';\nimport Education from './components/Education';\nimport JobExperience from './components/JobExperience';\nimport Skills from './components/Skills';\n\n\n\nimport React from 'react'\nconst App = () => {\n  return (\n    <div className=\"app\">\n      <h1>EDITABLE CURRICULUM</h1>\n      <GeneralInfo />\n      <hr/>\n      <Education />\n      <hr />\n      <JobExperience />\n      <hr />\n      <Skills />\n    </div>\n  )\n}\n\nexport default App\n\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport './styles/mainStyle.scss';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}