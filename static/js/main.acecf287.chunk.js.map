{"version":3,"sources":["components/GeneralInfo.js","components/SingleEducation.js","components/Education.js","components/SingleJob.js","components/JobExperience.js","components/SingleSkill.js","components/Skills.js","App.js","reportWebVitals.js","index.js"],"names":["GeneralInfoHooks","useState","editMode","setEditMode","firstName","surname","jobTitle","phone","email","position","generalInfo","setGeneralInfo","firstNameOld","surnameOld","jobTitleOld","phoneOld","emailOld","positionOld","generalInfoOld","setGeneralInfoOld","useEffect","toggleEditMode","handleChange","e","value","target","name","validator","className","placeholder","type","onChange","event","onClick","disabled","href","SingleEducation","props","isNew","setIsNew","studyTitle","schoolName","initialDate","endingDate","endingDateNotYetFinished","description","educationInfo","setEducationInfo","studyTitleOld","schoolNameOld","initialDateOld","endingDateOld","endingDateNotYetFinishedOld","descriptionOld","educationInfoOld","setEducationInfoOld","checked","rows","addingMode","remove","Education","setAddingMode","educationList","setEducationList","toggleAddingMode","map","item","id","key","filter","removeElement","uniqid","SingleJob","companyName","mainTasks","jobInfo","setJobInfo","companyNameOld","mainTasksOld","jobInfoOld","setJobInfoOld","JobExperience","jobsList","setJobsList","SingleSkill","skillName","setSkillName","handleSubmit","Skills","skillsList","setSkillsList","App","GeneralInfo","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.acecf287.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\r\n\r\nconst GeneralInfoHooks = () => {\r\n    const [editMode, setEditMode] = useState(false);\r\n\r\n    const [generalInfo, setGeneralInfo] = useState({\r\n        firstName: \"Name\",\r\n        surname: \"Surname\",\r\n        jobTitle: \"My specialization\",\r\n        phone: \"+00 000 0000000\",\r\n        email: \"yourMail@mailProvider.com\",\r\n        position: \"27 Colmore Row, Birmingham, England\",\r\n\r\n    });\r\n\r\n    const [generalInfoOld, setGeneralInfoOld] = useState({\r\n        firstNameOld: \"\",\r\n        surnameOld: \"\",\r\n        jobTitleOld: \"\",\r\n        phoneOld: \"\",\r\n        emailOld: \"\",\r\n        positionOld: \"\",\r\n    });\r\n\r\n\r\n    useEffect(() => {\r\n        setGeneralInfoOld({\r\n            firstNameOld: generalInfo.firstName,\r\n            surnameOld: generalInfo.surname,\r\n            jobTitleOld: generalInfo.jobTitle,\r\n            phoneOld: generalInfo.phone,\r\n            emailOld: generalInfo.email,\r\n            positionOld: generalInfo.position,\r\n        })\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n\r\n        \r\n    const toggleEditMode = () => {\r\n        setEditMode(!editMode)\r\n    };\r\n\r\n\r\n    const handleSubmit = () => {\r\n        setGeneralInfoOld({\r\n            firstNameOld: generalInfo.firstName,\r\n            surnameOld: generalInfo.surname,\r\n            jobTitleOld: generalInfo.jobTitle,\r\n            phoneOld: generalInfo.phone,\r\n            emailOld: generalInfo.email,\r\n            positionOld: generalInfo.position,\r\n        });\r\n        toggleEditMode();\r\n    };\r\n\r\n\r\n    const handleChange = (e) => {\r\n        const value = e.target.value;\r\n        const name = e.target.name;\r\n\r\n        setGeneralInfo({\r\n            ...generalInfo,\r\n            [name]:value,\r\n        });  \r\n    };\r\n\r\n\r\n    const handleUndo = () => {\r\n        setGeneralInfo({\r\n            firstName: generalInfoOld.firstNameOld,\r\n            surname: generalInfoOld.surnameOld,\r\n            jobTitle: generalInfoOld.jobTitleOld,\r\n            phone: generalInfoOld.phoneOld,\r\n            email: generalInfoOld.emailOld,\r\n            position: generalInfoOld.positionOld,\r\n        });  \r\n        toggleEditMode();\r\n    };\r\n\r\n\r\n    const {firstName, surname, jobTitle, phone, email, position} = generalInfo;\r\n    let validator = (!firstName || !surname || !jobTitle) ? true : false;\r\n\r\n    if (!editMode) {\r\n        return (\r\n            <div className=\"generalInfo\">\r\n                <div className=\"outputWrapper\">\r\n                    <h3>{firstName} {surname}</h3>\r\n                    <h4>{jobTitle}</h4>\r\n                </div>\r\n                <div className=\"outputWrapper\">\r\n                    <h5>{phone}</h5>\r\n                    <h5><a href={`mailto:${email}`}>{email}</a></h5>\r\n                    <h5>{position}</h5>\r\n                </div>\r\n                    <div className=\"buttonContainer\">\r\n                        <button onClick={() => toggleEditMode()}>EDIT INFORMATION</button>\r\n                    </div>\r\n                </div>\r\n        )\r\n    } else {\r\n        return (\r\n            <div className=\"generalInfoEditable\">\r\n                <div className=\"doubleFieldContainer\">\r\n                    <div className=\"fieldWrapper\">\r\n                        <label>Name</label>\r\n                        <input\r\n                            placeholder=\"* Enter your name\"\r\n                            type=\"text\"\r\n                            name=\"firstName\"\r\n                            value={firstName}\r\n                            onChange={(event) => handleChange(event)}\r\n                        />\r\n                    </div>\r\n                    <div className=\"fieldWrapper\">\r\n                        <label>Surname</label>\r\n                        <input\r\n                            placeholder=\"* Enter your surname\"\r\n                            type=\"text\"\r\n                            name=\"surname\"\r\n                            value={surname}\r\n                            onChange={(event) => handleChange(event)}\r\n                        />\r\n                    </div>\r\n                </div>\r\n                <div className=\"singleFieldContainer\">\r\n                    <div className=\"fieldWrapper\">\r\n                        <label>Job Title</label>\r\n                        <input\r\n                            placeholder=\"* Enter your job title\"\r\n                            type=\"text\"\r\n                            name=\"jobTitle\"\r\n                            value={jobTitle}\r\n                            onChange={(event) => handleChange(event)}\r\n                        />\r\n                    </div>\r\n                </div>\r\n                <div className=\"doubleFieldContainer\">\r\n                    <div className=\"fieldWrapper\">\r\n                        <label>Phone number</label>\r\n                        <input\r\n                            placeholder=\"* Enter your phone number\"\r\n                            type=\"text\"\r\n                            name=\"phone\"\r\n                            value={phone}\r\n                            onChange={(event) => handleChange(event)}\r\n                        />\r\n                    </div>\r\n                    <div className=\"fieldWrapper\">\r\n                        <label>Email</label>\r\n                        <input\r\n                            placeholder=\"* Enter your email\"\r\n                            type=\"text\"\r\n                            name=\"email\"\r\n                            value={email}\r\n                            onChange={(event) => handleChange(event)}\r\n                        />\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"singleFieldContainer\">\r\n                    <div className=\"fieldWrapper\">\r\n                        <label>Position</label>\r\n                        <input\r\n                            placeholder=\"* Enter your position\"\r\n                            type=\"text\"\r\n                            name=\"position\"\r\n                            value={position}\r\n                            onChange={(event) => handleChange(event)}\r\n                        />\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"buttonContainer\">\r\n                    <button onClick={() => handleSubmit()} disabled={validator}>SUBMIT</button>\r\n                    <button onClick={() => handleUndo()}>UNDO</button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }  \r\n}\r\nexport default GeneralInfoHooks","import React, { useState, useEffect } from 'react'\r\n\r\nconst SingleEducation = (props) => {\r\n    const [editMode, setEditMode] = useState(false);\r\n    const [isNew, setIsNew] = useState(true);\r\n\r\n    const [educationInfo, setEducationInfo] = useState({\r\n        studyTitle: \"\",\r\n        schoolName: \"\",\r\n        initialDate: \"\",\r\n        endingDate: \"\",\r\n        endingDateNotYetFinished: false,\r\n        description: \"\",\r\n    });\r\n\r\n    const [educationInfoOld, setEducationInfoOld] = useState({\r\n        studyTitleOld: \"\",\r\n        schoolNameOld: \"\",\r\n        initialDateOld: \"\",\r\n        endingDateOld: \"\",\r\n        endingDateNotYetFinishedOld: \"\",\r\n        descriptionOld: \"\",\r\n    });\r\n    \r\n     \r\n    useEffect(() => {\r\n        setIsNew(true);\r\n        setEditMode(true);\r\n        setEducationInfoOld({\r\n            studyTitleOld: educationInfo.studyTitle,\r\n            schoolNameOld: educationInfo.schoolName,\r\n            initialDateOld: educationInfo.initialDate,\r\n            endingDateOld: educationInfo.endingDate,\r\n            endingDateNotYetFinishedOld: educationInfo.endingDateNotYetFinished,\r\n            descriptionOld: educationInfo.description,\r\n        });\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n\r\n   \r\n\r\n    const toggleEditMode = () => {\r\n        setEditMode(!editMode)  \r\n    };\r\n\r\n\r\n    //METHOD FOR SUBMITTING OLD ELEMENTS\r\n    const handleSubmit = () => {\r\n        setEducationInfoOld({\r\n            studyTitleOld: educationInfo.studyTitle,\r\n            schoolNameOld: educationInfo.schoolName,\r\n            initialDateOld: educationInfo.initialDate,\r\n            endingDateOld: educationInfo.endingDate,\r\n            endingDateNotYetFinishedOld: educationInfo.endingDateNotYetFinished,\r\n            descriptionOld: educationInfo.description,\r\n        })\r\n        toggleEditMode();        \r\n    }\r\n\r\n\r\n    //METHOD FOR SUBMITTING NEW ELEMENT\r\n    const handleSubmitforNewElement = () => {        \r\n        setIsNew(false);\r\n\r\n        setEducationInfoOld({\r\n            studyTitleOld: educationInfo.studyTitle,\r\n            schoolNameOld: educationInfo.schoolName,\r\n            initialDateOld: educationInfo.initialDate,\r\n            endingDateOld: educationInfo.endingDate,\r\n            endingDateNotYetFinishedOld: educationInfo.endingDateNotYetFinished,\r\n            descriptionOld: educationInfo.description,\r\n        });\r\n        \r\n        toggleEditMode();\r\n        props.addingMode();\r\n    }\r\n\r\n\r\n    const handleChange = (e) => {\r\n        const value = e.target.value;\r\n        const name = e.target.name;\r\n\r\n        setEducationInfo({\r\n            ...educationInfo,\r\n            [name]: value,\r\n        })\r\n    }\r\n\r\n\r\n    const handleCheckbox = (e) => {\r\n        setEducationInfo({\r\n            ...educationInfo,\r\n            endingDateNotYetFinished: e.target.checked,\r\n        })\r\n    }\r\n\r\n\r\n    const handleUndo = () => {\r\n        setEducationInfo({\r\n            studyTitle: educationInfoOld.studyTitleOld,\r\n            schoolName: educationInfoOld.schoolNameOld,\r\n            initialDate: educationInfoOld.initialDateOld,\r\n            endingDate: educationInfoOld.endingDateOld,\r\n            endingDateNotYetFinished: educationInfoOld.endingDateNotYetFinishedOld,\r\n            description: educationInfoOld.descriptionOld,\r\n        });\r\n        toggleEditMode(); \r\n    }\r\n\r\n   \r\n    const { studyTitle, schoolName, initialDate, endingDate, endingDateNotYetFinished, description} = educationInfo;\r\n    let validator = (!studyTitle || !schoolName || !initialDate || (!endingDate && !endingDateNotYetFinished)) ? true : false;\r\n\r\n    if(!editMode){\r\n        return (\r\n            <div className=\"singleEducation\">\r\n                <div className=\"dataContainer\">\r\n                    <h4 className=\"date\">{initialDate} / {!endingDateNotYetFinished ? endingDate : \"In progress\"}</h4>\r\n                        <h4><b>{studyTitle}</b></h4>  \r\n                        <h4><b>{schoolName}</b></h4>\r\n                        <h4 className=\"otherData\">{description}</h4>                                           \r\n                </div>\r\n                        \r\n                <div className=\"singleButtonsContainer\">\r\n                    <button onClick={() => toggleEditMode()}>EDIT</button>\r\n                    <button onClick={() => props.remove(props)}>DELETE</button>\r\n                </div> \r\n            </div>\r\n        )\r\n    } else {\r\n        return (\r\n            <div className=\"singleEducationEditable\">\r\n\r\n                <div className=\"doubleFieldContainer\">\r\n                    <div className=\"fieldWrapper\">\r\n                        <label>Title of study</label>\r\n                        <input\r\n                            placeholder=\"* Enter the title of study\"\r\n                            type=\"text\"\r\n                            name=\"studyTitle\"\r\n                            value={studyTitle}\r\n                            onChange={(event) => handleChange(event)}\r\n                        />\r\n                    </div>\r\n                    <div className=\"fieldWrapper\">\r\n                        <label>School name</label>\r\n                        <input\r\n                            placeholder=\"* Enter the school name\"\r\n                            type=\"text\"\r\n                            name=\"schoolName\"\r\n                            value={schoolName}\r\n                            onChange={(event) => handleChange(event)}\r\n                        />\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"singleFieldContainer\">\r\n                    <div className=\"fieldWrapper\">\r\n                        <label>Starting date</label>\r\n                        <input\r\n                            placeholder=\"* Enter when you started this study\"\r\n                            type=\"date\"\r\n                            name=\"initialDate\"\r\n                            value={initialDate}\r\n                            onChange={(event) => handleChange(event)}\r\n                        />\r\n                    </div>    \r\n                </div>\r\n\r\n                <div className=\"doubleFieldContainer\">                     \r\n                    <div className=\"fieldWrapper\">\r\n                        <label>Ending date</label>\r\n                        <input\r\n                            placeholder=\"* Enter when you finished this study\"\r\n                            type=\"date\"\r\n                            name=\"endingDate\"\r\n                            disabled={endingDateNotYetFinished}\r\n                            value={endingDate}\r\n                            onChange={(event) => handleChange(event)}\r\n                        />\r\n                    </div>\r\n                    <div className=\"fieldWrapperCheckbox\">\r\n                        <label>In progress</label>\r\n                        <input\r\n                            type=\"checkbox\"\r\n                            checked={endingDateNotYetFinished}\r\n                            onChange={(event) => handleCheckbox(event)}\r\n                        />                           \r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"singleFieldContainer\">\r\n                    <div className=\"fieldWrapper\">\r\n                        <label>Description</label>\r\n                        <textarea\r\n                            placeholder=\"* Describe your experience\"\r\n                            name=\"description\"\r\n                            rows=\"4\"\r\n                            value={description}\r\n                            onChange={(event) => handleChange(event)}\r\n                        />\r\n                    </div>\r\n                </div>\r\n                    \r\n                {isNew //CONDITION FOR THE RENDER OF THE BUTTONS (different for new added and old element)\r\n                    ?  \r\n                        <div className=\"buttonContainer\">\r\n                            <button onClick={() => handleSubmitforNewElement()} disabled={validator}>SUBMIT</button>                                   \r\n                            <button onClick={() => props.remove(props)}>UNDO</button>\r\n                        </div> \r\n                    :\r\n                        <div className=\"buttonContainer\">\r\n                            <button onClick={() => handleSubmit()} disabled={validator}>SUBMIT</button>\r\n                            <button onClick={() => handleUndo()}>UNDO</button>\r\n                        </div>  \r\n                }                              \r\n            </div>\r\n        )\r\n    }  \r\n}\r\nexport default SingleEducation\r\n\r\n","import React, { useState } from 'react';\r\nimport SingleEducation from './SingleEducation';\r\nimport uniqid from \"uniqid\";\r\n\r\nconst Education = () => {\r\n    const [addingMode, setAddingMode] = useState(false);\r\n    const [educationList, setEducationList] = useState([]);\r\n       \r\n    \r\n    const toggleAddingMode = () => {\r\n        setAddingMode(!addingMode);\r\n    };\r\n\r\n\r\n    const addNewElement = () => {\r\n        toggleAddingMode();\r\n        setEducationList([...educationList, { key: uniqid() }]);       \r\n    };\r\n\r\n\r\n    const removeElement = (e) => {\r\n        setEducationList(educationList.filter(item => item.key !== e.id));\r\n        \r\n        if (addingMode) {\r\n            setAddingMode(false)\r\n        }\r\n    };\r\n\r\n\r\n    return (\r\n        <div className=\"educationBox\" >\r\n            <h2>EDUCATION LIST</h2>\r\n            {educationList\r\n                .map(item => \r\n                    <SingleEducation\r\n                        key={item.key}\r\n                        id={item.key}\r\n                        addingMode={() => toggleAddingMode()}\r\n                        remove={(e) => removeElement(e)}     \r\n                    />                       \r\n                )\r\n            }\r\n\r\n            {!addingMode &&\r\n                <div className=\"generalButtonContainer\">\r\n                    <button onClick={() => addNewElement()}>ADD NEW EDUCATION</button>\r\n                </div>\r\n            }\r\n        </div>\r\n    )  \r\n}\r\nexport default Education","import React, { useState, useEffect } from 'react'\r\n\r\nconst SingleJob = (props) => {\r\n    const [editMode, setEditMode] = useState(false);\r\n    const [isNew, setIsNew] = useState(true);\r\n\r\n    const [jobInfo, setJobInfo] = useState({\r\n        companyName: \"\",\r\n        position: \"\",\r\n        initialDate: \"\",\r\n        endingDate: \"\",\r\n        endingDateNotYetFinished: false,\r\n        mainTasks: \"\",\r\n        description: \"\",\r\n    });\r\n\r\n    const [jobInfoOld, setJobInfoOld] = useState({\r\n        companyNameOld: \"\",\r\n        positionOld: \"\",\r\n        initialDateOld: \"\",\r\n        endingDateOld: \"\",\r\n        endingDateNotYetFinishedOld: \"\",\r\n        mainTasksOld: \"\",\r\n        descriptionOld: \"\",\r\n    })\r\n\r\n    useEffect(() => {\r\n        setIsNew(true);\r\n        setEditMode(true);\r\n        setJobInfoOld({\r\n            companyNameOld: jobInfo.companyName,\r\n            positionOld: jobInfo.position,\r\n            initialDateOld: jobInfo.initialDate,\r\n            endingDateOld: jobInfo.endingDate,\r\n            endingDateNotYetFinishedOld: jobInfo.endingDateNotYetFinished,\r\n            mainTasksOld: jobInfo.mainTasks,\r\n            descriptionOld: jobInfo.description,\r\n        });\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n        \r\n\r\n    const toggleEditMode = () => {\r\n        setEditMode(!editMode)\r\n    };\r\n\r\n\r\n    //METHOD FOR SUBMITTING OLD ELEMENTS\r\n    const handleSubmit = () => {\r\n        setJobInfoOld({\r\n            companyNameOld: jobInfo.companyName,\r\n            positionOld: jobInfo.position,\r\n            initialDateOld: jobInfo.initialDate,\r\n            endingDateOld: jobInfo.endingDate,\r\n            endingDateNotYetFinishedOld: jobInfo.endingDateNotYetFinished,\r\n            mainTasksOld: jobInfo.mainTasks,\r\n            descriptionOld: jobInfo.description,\r\n        });\r\n        toggleEditMode();\r\n    }\r\n\r\n\r\n    //METHOD FOR SUBMITTING NEW ELEMENT\r\n    const handleSubmitforNewElement = () => {\r\n        setIsNew(false);\r\n\r\n        setJobInfoOld({\r\n            companyNameOld: jobInfo.companyName,\r\n            positionOld: jobInfo.position,\r\n            initialDateOld: jobInfo.initialDate,\r\n            endingDateOld: jobInfo.endingDate,\r\n            endingDateNotYetFinishedOld: jobInfo.endingDateNotYetFinished,\r\n            mainTasksOld: jobInfo.mainTasks,\r\n            descriptionOld: jobInfo.description,\r\n        });\r\n\r\n        toggleEditMode();\r\n        props.addingMode();\r\n    }\r\n\r\n\r\n    const handleChange = (e) => {\r\n        const value = e.target.value;\r\n        const name = e.target.name;\r\n\r\n        setJobInfo({\r\n            ...jobInfo,\r\n            [name]: value,\r\n        })\r\n    }\r\n\r\n    const handleCheckbox = (e) => {\r\n        setJobInfo({\r\n            ...jobInfo,\r\n            endingDateNotYetFinished: e.target.checked,\r\n        })\r\n    }\r\n\r\n\r\n    const handleUndo = () => {\r\n        setJobInfo({\r\n            companyName: jobInfoOld.companyNameOld,\r\n            position: jobInfoOld.positionOld,\r\n            initialDate: jobInfoOld.initialDateOld,\r\n            endingDate: jobInfoOld.endingDateOld,\r\n            endingDateNotYetFinished: jobInfoOld.endingDateNotYetFinishedOld,\r\n            mainTasks: jobInfoOld.mainTasksOld,\r\n            description: jobInfoOld.descriptionOld,\r\n        });\r\n        toggleEditMode();\r\n    }\r\n\r\n\r\n\r\n    const { companyName, position, initialDate, endingDate, endingDateNotYetFinished, mainTasks, description } = jobInfo;\r\n    let validator = (!companyName || !position || !initialDate || (!endingDate && !endingDateNotYetFinished)) ? true : false;\r\n\r\n    if (!editMode) {\r\n        return (\r\n            <div className=\"singleJob\">\r\n                <div className=\"dataContainer\">\r\n                    <h4 className=\"date\">{initialDate} / {!endingDateNotYetFinished ? endingDate : \"In progress\"}</h4>\r\n                    <h4><b>{position}</b></h4>\r\n                    <h4><b>{companyName}</b></h4>\r\n                    {mainTasks && <h4 className=\"otherData\">TASKS: <b>{mainTasks}</b></h4>}\r\n                    <h4 className=\"otherData\">{description}</h4>\r\n                </div>\r\n                                    \r\n                <div className=\"singleButtonsContainer\">\r\n                    <button onClick={() => toggleEditMode()}>EDIT</button>\r\n                    <button onClick={() => props.remove(props)}>DELETE</button>\r\n                </div>\r\n            </div>\r\n        )\r\n    } else {\r\n        return (\r\n            <div className=\"singleJobEditable\">\r\n                <div className=\"doubleFieldContainer\">\r\n                    <div className=\"fieldWrapper\">\r\n                        <label>Company name</label>\r\n                        <input\r\n                            placeholder=\"* Enter the company name\"\r\n                            type=\"text\"\r\n                            name=\"companyName\"\r\n                            value={companyName}\r\n                            onChange={(event) => handleChange(event)}\r\n                        />\r\n                    </div>\r\n                    <div className=\"fieldWrapper\">\r\n                        <label>Job position</label>\r\n                        <input\r\n                            placeholder=\"* Enter your job position\"\r\n                            type=\"text\"\r\n                            name=\"position\"\r\n                            value={position}\r\n                            onChange={(event) => handleChange(event)}\r\n                        />\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"singleFieldContainer\">\r\n                    <div className=\"fieldWrapper\">\r\n                        <label>Starting date</label>\r\n                        <input\r\n                            placeholder=\"* Enter when you started this job\"\r\n                            type=\"date\"\r\n                            name=\"initialDate\"\r\n                            value={initialDate}\r\n                            onChange={(event) => handleChange(event)}\r\n                        />\r\n                    </div>\r\n                </div>\r\n                \r\n                <div className=\"doubleFieldContainer\">\r\n                    <div className=\"fieldWrapper\">\r\n                        <label>Ending date</label>\r\n                        <input\r\n                            placeholder=\"* Enter when you finished this job\"\r\n                            type=\"date\"\r\n                            name=\"endingDate\"\r\n                            disabled={endingDateNotYetFinished}\r\n                            value={endingDate}\r\n                            onChange={(event) => handleChange(event)}\r\n                        />\r\n                    </div>\r\n                    <div className=\"fieldWrapperCheckbox\">\r\n                        <label>In progress</label>\r\n                        <input\r\n                            type=\"checkbox\"\r\n                            checked={endingDateNotYetFinished}\r\n                            onChange={(event) => handleCheckbox(event)}\r\n                        />\r\n                    </div>                       \r\n                </div>\r\n\r\n                <div className=\"singleFieldContainer\">\r\n                    <div className=\"fieldWrapper\">\r\n                        <label>Main tasks</label>\r\n                        <textarea\r\n                            placeholder=\"* Enter your main tasks\"\r\n                            name=\"mainTasks\"\r\n                            rows=\"3\"\r\n                            value={mainTasks}\r\n                            onChange={(event) => handleChange(event)}\r\n                        />\r\n                    </div>\r\n                </div>\r\n                \r\n                <div className=\"singleFieldContainer\">\r\n                    <div className=\"fieldWrapper\">\r\n                        <label>Description</label>\r\n                        <textarea\r\n                            placeholder=\"* Describe your experience\"\r\n                            name=\"description\"\r\n                            rows=\"4\"\r\n                            value={description}\r\n                            onChange={(event) => handleChange(event)}\r\n                        />\r\n                    </div>\r\n                </div>\r\n                \r\n                {isNew //CONDITION FOR THE RENDER OF THE BUTTONS (different for new added and old element)\r\n                    ?\r\n                    <div className=\"buttonContainer\">\r\n                        <button onClick={() => handleSubmitforNewElement()} disabled={validator}>SUBMIT</button>\r\n                        <button onClick={() => props.remove(props)}>UNDO</button>\r\n                    </div>\r\n                    :\r\n                    <div className=\"buttonContainer\">\r\n                        <button onClick={() => handleSubmit()} disabled={validator}>SUBMIT</button>\r\n                        <button onClick={() => handleUndo()}>UNDO</button>\r\n                    </div>\r\n                }\r\n            </div>\r\n        )\r\n    }  \r\n}\r\n\r\nexport default SingleJob\r\n\r\n","import React, { useState } from 'react';\r\nimport SingleJob from './SingleJob';\r\nimport uniqid from \"uniqid\";\r\n\r\n\r\nconst JobExperience = () => {\r\n    const [addingMode, setAddingMode] = useState(false);\r\n    const [jobsList, setJobsList] = useState([]);\r\n\r\n\r\n    const toggleAddingMode = () => {\r\n        setAddingMode(!addingMode);\r\n    };\r\n\r\n\r\n    const addNewElement = () => {\r\n        toggleAddingMode();\r\n        setJobsList([...jobsList, { key: uniqid() }]);\r\n    };\r\n\r\n\r\n    const removeElement = (e) => {\r\n        setJobsList(jobsList.filter(item => item.key !== e.id));\r\n\r\n        if (addingMode) {\r\n            setAddingMode(false)\r\n        }\r\n    };\r\n    \r\n\r\n    return (\r\n        <div className=\"jobsBox\" >\r\n            <h2>JOBS LIST</h2>\r\n            {jobsList\r\n                .map(item =>\r\n                    <SingleJob\r\n                        key={item.key}\r\n                        id={item.key}\r\n                        addingMode={() => toggleAddingMode()}\r\n                        remove={(e) => removeElement(e)}\r\n                    />\r\n                )\r\n            }\r\n\r\n            {!addingMode &&\r\n                <div className=\"generalButtonContainer\">\r\n                    <button onClick={() => addNewElement()}>ADD NEW JOB</button>\r\n                </div> \r\n            }\r\n        </div>\r\n    ) \r\n}\r\nexport default JobExperience","import React, { useState, useEffect } from 'react'\r\n\r\nconst SingleSkill = (props) => {\r\n    const [editMode, setEditMode] = useState(false);\r\n    const [skillName, setSkillName] = useState(\"\");\r\n\r\n\r\n    useEffect(() => {\r\n        setEditMode(true);\r\n    }, []);\r\n\r\n\r\n    const toggleEditMode = () => {\r\n        setEditMode(!editMode)\r\n    };\r\n\r\n        \r\n    const handleSubmit = () => {\r\n        toggleEditMode();\r\n        props.addingMode();\r\n    }\r\n\r\n\r\n    const handleChange = (e) => {\r\n        const value = e.target.value;\r\n        setSkillName(value)\r\n    }\r\n\r\n \r\n    let validator = (!skillName) ? true : false;\r\n\r\n    if (!editMode) {\r\n        return (\r\n            <div className=\"singleSkill\">\r\n                <h4 className=\"data\">{skillName}</h4>\r\n                <div className=\"deleteButton\">\r\n                    <button onClick={() => props.remove(props)}>X</button>\r\n                </div>\r\n            </div>\r\n        )\r\n    } else {\r\n        return (\r\n            <div className=\"singleSkillEditable\">\r\n                <div className=\"fieldWrapper\">\r\n                    <input\r\n                        placeholder=\"* Enter the skill name\"\r\n                        type=\"text\"\r\n                        name=\"skillName\"\r\n                        value={skillName}\r\n                        onChange={(event) => handleChange(event)}\r\n                    />\r\n                </div>                  \r\n                <div className=\"singleButtonsContainer\">\r\n                    <button onClick={() => handleSubmit()} disabled={validator}>SUBMIT</button>\r\n                    <button onClick={() => props.remove(props)}>UNDO</button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }  \r\n}\r\nexport default SingleSkill\r\n","import React, { useState } from 'react';\r\nimport SingleSkill from './SingleSkill';\r\nimport uniqid from \"uniqid\";\r\n\r\n\r\nconst Skills = () => {\r\n    const [addingMode, setAddingMode] = useState(false);\r\n    const [skillsList, setSkillsList] = useState([]);\r\n\r\n\r\n    const toggleAddingMode = () => {\r\n        setAddingMode(!addingMode);\r\n    };\r\n\r\n\r\n    const addNewElement = () => {\r\n        toggleAddingMode();\r\n        setSkillsList([...skillsList, { key: uniqid() }]);\r\n    };\r\n\r\n\r\n    const removeElement = (e) => {\r\n        setSkillsList(skillsList.filter(item => item.key !== e.id));\r\n\r\n        if (addingMode) {\r\n            setAddingMode(false)\r\n        }\r\n    };\r\n\r\n      \r\n    return (\r\n        <div className=\"skills\" >\r\n            <h2>SKILLS</h2>\r\n            <div className=\"itemsContainer\">\r\n                {skillsList\r\n                    .map(item =>\r\n                        <SingleSkill\r\n                            key={item.key}\r\n                            id={item.key}\r\n                            addingMode={() => toggleAddingMode()}\r\n                            remove={(e) => removeElement(e)}\r\n                        />\r\n                    )}\r\n            </div>\r\n            \r\n            {!addingMode &&\r\n                <div className=\"generalButtonContainer\"> \r\n                    <button onClick={() => addNewElement()}>ADD NEW SKILL</button>\r\n                </div>\r\n            }\r\n        </div>\r\n    )  \r\n}\r\n\r\nexport default Skills","import GeneralInfo from './components/GeneralInfo';\nimport Education from './components/Education';\nimport JobExperience from './components/JobExperience';\nimport Skills from './components/Skills';\n\n\n\nimport React from 'react'\nconst App = () => {\n  return (\n    <div className=\"app\">\n      <h1>EDITABLE CURRICULUM</h1>\n      <GeneralInfo />\n      <hr/>\n      <Education />\n      <hr />\n      <JobExperience />\n      <hr />\n      <Skills />\n    </div>\n  )\n}\n\nexport default App\n\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport './styles/mainStyle.scss';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}